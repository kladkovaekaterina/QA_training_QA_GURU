import org.junit.jupiter.api.Test;

public class JavaOperatorsTest {

    // HW5.5
    @Test
    void test() {
        // 0) прочитать про диапазоны типов данных для вещественных / чисел с плавающей точкой -> https://github.com/qa-guru/knowledge-base 4. Основы Java
        // Целочисленные типы
        byte a = 1; // целочисленный тип, хранит целое число от -128 до 127 и занимает 1 байт памяти
        short b = 2; // целочисленный тип, хранит целое число от -32768 до 32767 и занимает 2 байта памяти
        int c = 3; // целочисленный тип, хранит целое число от -2147483648 до 2147483647 и занимает 4 байта памяти
        long d = 4L; // целочисленный тип, хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт памяти
        // Типы с плавающей точкой (для представления вещественных чисел с плавающей точкой используются типы данных float и double)
        float e = 5.55F; // хранит число с плавающей точкой от -3.4E+38 до 3.4E+38
        double f = 6.789; // хранит число с плавающей точкой от -1.7E+308 до 1.7E+308


        // 1) поупражняться с математическими (+, -, *, /, %, ++, --) и логическими (&, |, &&, ||, !) операторами, добиться переполнения при вычислениях, посмотреть результаты (вывести в консоль)
        // Арифметические операторы
        System.out.println("a + b = " + (a + b)); // 1 + 2 = 3
        System.out.println("d / c = " + (d / c)); // 4 / 3 = 1
        System.out.println("d % c = " + (d % c)); // 4 % 3 = 1
        System.out.println("a++ = " + (a++)); // 1 постфиксный инкремент (сначала используется текущее значение переменной, а затем оно увеличивается на единицу)
        // затем происходит -> a = 1 + 1 = 2
        System.out.println("++a = " + (++a)); // 2 + 1 = 3 префиксный инкремент (сначала переменная увеличится на единицу, а затем будет использовано ее новое значение)
        // Логические операторы (& (и), | (или), && (истина только если все операнды истина), || (если хотя бы один операнд истина, то итоговый результат истина), ! (не))
        System.out.println(a == 3 && e == 4.5F); // false, потому что второй операнд не истина
        System.out.println(a == 3 || f == 6.78); // true, потому что хотя бы первый операнд истина
        // добиться переполнения при вычислениях
        byte g = 127;
        byte h = ++g; // 127 + 1 = 128 (выходит за пределы диапазона типа byte)
        System.out.println("h = " + h); // после переполнения значение "зацикливается" и становится -128
        System.out.println("h + 5 = " + (h + 5)); // -123

        // 2) попробовать вычисления комбинаций типов данных (int и double)
        System.out.println("c * f = " + (c * f)); // 3 * 6.789 = 20.366999999999997
        System.out.println("f / c = " + (f / c)); // 6.789 / 3 = 2.263
    }
}